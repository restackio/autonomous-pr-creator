from grpc import Status
from restack_ai.function import function
from src.functions.generate_pr_info import PrInfo
from dataclasses import dataclass
from git import Repo
import os
import re
import requests

@dataclass
class FunctionInputParams:
    repo_path: str
    pr_info: PrInfo

@function.defn(name="CreatePr")
async def create_pr(input: FunctionInputParams):
    """Creates a Pull Request for the changes in the given repository.

    This function:
    1. Creates a new branch
    2. Commits all changes
    3. Pushes to remote repository
    4. Creates a PR via GitHub API

    Args:
        input (FunctionInputParams): Contains repo_path and pr_info (branch name, commit message, PR title)

    Returns:
        dict: Contains PR URL and status if successful
        None: If no changes to commit or if PR creation fails
    """
    repo = Repo(input.repo_path)

    if repo.is_dirty():
        remote_url = repo.remotes.origin.url
        repo_name = re.search(r'github\.com[:/](.*?)(?:\.git)?$', remote_url).group(1)

        repo.git.checkout('HEAD', b=input.pr_info.branch_name)
        repo.git.add(A=True)
        repo.index.commit(input.pr_info.commit_message)
        repo.remote("origin").push(input.pr_info.branch_name)

        response = requests.post(
            f"https://api.github.com/repos/{repo_name}/pulls",
            headers={"Authorization": f"token {os.environ.get('GITHUB_TOKEN')}"},
            json={
                "title": input.pr_info.pr_title,
                "body": "This PR was generated by Gemini using the Restack AI Python SDK",
                "head": input.pr_info.branch_name,
                "base": "main"
            }
        )
        if response.status_code == 201:
            pr_url = response.json()['html_url']
            return {"pr_url": pr_url, "status": "success"}
        else:
            print(f"Failed to create PR: {response.json()}")
    else:
        print("No changes to commit")